type Post @key(fields: "_id") {
  _id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  content: String
  imageUrl: String
  creator: ID
  author: User!
}

input CreatePostInput {
  title: String!
  content: String!
  imageUrl: String
}

input UpdatePostInput {
  _id: ID!
  title: String
  content: String
  imageUrl: String
  creator: ID
}

extend type Query {
  getPostById(_id: ID!): Post @cacheSet(type: "getPostById", identifier: "_id")
  getAllPost(
    search: String
    filter: JSON
    sort: JSON
    limit: Int
    offset: Int
  ): [Post]! @cacheSet(type: "getAllPosts", identifier: "_id")
  getOnePost(filter: JSON, sort: JSON): Post
    @cacheSet(type: "getPost", identifier: "_id")
  getAllPostCount(search: String, filter: JSON): Int!
}

extend type Mutation {
  createPost(data: CreatePostInput!): Post!
    @auth
    @cachePurge(payloads: [{ types: ["getPost", "getAllPosts"] }])

  updatePost(data: UpdatePostInput!): Post!
    @auth
    @cachePurge(
      payloads: [
        { types: ["getPost", "getAllPosts", "getPostById"], identifier: "_id" }
      ]
    )

  deletePost(_id: ID!): Post!
    @auth
    @cachePurge(
      payloads: [
        { types: ["getPost", "getAllPosts", "getPostById"], identifier: "_id" }
      ]
    )
}
